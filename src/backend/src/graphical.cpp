#include <graphical.hpp>
#include <stdexcept>
#include <array>
#include <vector>

#define vop_commutes_with_CZ(v) (v == 1 || v == 2 || v == 5 || v == 8)

namespace graphical
{

    static const uint8_t vop_lookup_table[24][24] = 
    {
        {2, 4, 0, 12, 1, 7, 15, 5, 10, 19, 8, 22, 3, 14, 13, 6, 23, 18, 17, 9, 21, 20, 11, 16}
        , {3, 5, 1, 13, 6, 8, 17, 9, 2, 20, 11, 23, 10, 15, 16, 0, 21, 19, 14, 4, 22, 18, 7, 12}
        , {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}
        , {1, 6, 3, 10, 5, 9, 0, 8, 11, 4, 2, 7, 13, 16, 15, 17, 12, 14, 19, 20, 18, 22, 23, 21}
        , {12, 7, 4, 14, 15, 10, 18, 19, 0, 21, 22, 16, 8, 6, 23, 2, 20, 9, 13, 1, 11, 17, 5, 3}
        , {13, 8, 5, 15, 17, 2, 19, 20, 1, 22, 23, 12, 11, 0, 21, 3, 18, 4, 16, 6, 7, 14, 9, 10}
        , {10, 9, 6, 16, 0, 11, 14, 4, 3, 18, 7, 21, 2, 17, 12, 1, 22, 20, 15, 5, 23, 19, 8, 13}
        , {14, 10, 7, 6, 18, 0, 9, 21, 4, 11, 16, 3, 22, 2, 20, 12, 17, 1, 23, 15, 5, 13, 19, 8}
        , {15, 2, 8, 0, 19, 1, 4, 22, 5, 7, 12, 10, 23, 3, 18, 13, 14, 6, 21, 17, 9, 16, 20, 11}
        , {16, 11, 9, 17, 14, 3, 20, 18, 6, 23, 21, 13, 7, 1, 22, 10, 19, 5, 12, 0, 8, 15, 4, 2}
        , {6, 0, 10, 2, 9, 4, 1, 11, 7, 5, 3, 8, 16, 12, 17, 14, 13, 15, 20, 18, 19, 23, 21, 22}
        , {17, 3, 11, 1, 20, 6, 5, 23, 9, 8, 13, 2, 21, 10, 19, 16, 15, 0, 22, 14, 4, 12, 18, 7}
        , {4, 15, 12, 8, 7, 19, 2, 10, 22, 1, 0, 5, 14, 23, 6, 18, 3, 13, 9, 21, 17, 11, 16, 20}
        , {5, 17, 13, 11, 8, 20, 3, 2, 23, 6, 1, 9, 15, 21, 0, 19, 10, 16, 4, 22, 14, 7, 12, 18}
        , {7, 18, 14, 22, 10, 21, 12, 0, 16, 15, 4, 19, 6, 20, 2, 9, 8, 23, 1, 11, 13, 5, 3, 17}
        , {8, 19, 15, 23, 2, 22, 13, 1, 12, 17, 5, 20, 0, 18, 3, 4, 11, 21, 6, 7, 16, 9, 10, 14}
        , {9, 14, 16, 7, 11, 18, 10, 3, 21, 0, 6, 4, 17, 22, 1, 20, 2, 12, 5, 23, 15, 8, 13, 19}
        , {11, 20, 17, 21, 3, 23, 16, 6, 13, 14, 9, 18, 1, 19, 10, 5, 7, 22, 0, 8, 12, 4, 2, 15}
        , {22, 21, 18, 20, 12, 16, 23, 15, 14, 13, 19, 17, 4, 9, 8, 7, 5, 11, 2, 10, 3, 1, 0, 6}
        , {23, 22, 19, 18, 13, 12, 21, 17, 15, 16, 20, 14, 5, 4, 11, 8, 9, 7, 3, 2, 10, 6, 1, 0}
        , {21, 23, 20, 19, 16, 13, 22, 14, 17, 12, 18, 15, 9, 5, 7, 11, 4, 8, 10, 3, 2, 0, 6, 1}
        , {20, 16, 21, 9, 23, 14, 11, 13, 18, 3, 17, 6, 19, 7, 5, 22, 1, 10, 8, 12, 0, 2, 15, 4}
        , {18, 12, 22, 4, 21, 15, 7, 16, 19, 10, 14, 0, 20, 8, 9, 23, 6, 2, 11, 13, 1, 3, 17, 5}
        , {19, 13, 23, 5, 22, 17, 8, 12, 20, 2, 15, 1, 18, 11, 4, 21, 0, 3, 7, 16, 6, 10, 14, 9}
    };
    static const int two_qbit_config_to_number[24][24][2] = 
    {
        { {0, 1}, {2, 3}, {4, 5}, {6, 7}, {8, 9}, {10, 11}, {12, 13}, {14, 15}, {16, 17}, {18, 19}, {20, 21}, {22, 23}, {24, 25}, {26, 27}, {28, 29}, {30, 31}, {32, 33}, {34, 35}, {36, 37}, {38, 39}, {40, 41}, {42, 43}, {44, 45}, {46, 47} }
        , { {48, 49}, {50, 51}, {52, 53}, {54, 55}, {56, 57}, {58, 59}, {60, 61}, {62, 63}, {64, 65}, {66, 67}, {68, 69}, {70, 71}, {72, 73}, {74, 75}, {76, 77}, {78, 79}, {80, 81}, {82, 83}, {84, 85}, {86, 87}, {88, 89}, {90, 91}, {92, 93}, {94, 95} }
        , { {96, 97}, {98, 99}, {100, 101}, {102, 103}, {104, 105}, {106, 107}, {108, 109}, {110, 111}, {112, 113}, {114, 115}, {116, 117}, {118, 119}, {120, 121}, {122, 123}, {124, 125}, {126, 127}, {128, 129}, {130, 131}, {132, 133}, {134, 135}, {136, 137}, {138, 139}, {140, 141}, {142, 143} }
        , { {144, 145}, {146, 147}, {148, 149}, {150, 151}, {152, 153}, {154, 155}, {156, 157}, {158, 159}, {160, 161}, {162, 163}, {164, 165}, {166, 167}, {168, 169}, {170, 171}, {172, 173}, {174, 175}, {176, 177}, {178, 179}, {180, 181}, {182, 183}, {184, 185}, {186, 187}, {188, 189}, {190, 191} }
        , { {192, 193}, {194, 195}, {196, 197}, {198, 199}, {200, 201}, {202, 203}, {204, 205}, {206, 207}, {208, 209}, {210, 211}, {212, 213}, {214, 215}, {216, 217}, {218, 219}, {220, 221}, {222, 223}, {224, 225}, {226, 227}, {228, 229}, {230, 231}, {232, 233}, {234, 235}, {236, 237}, {238, 239} }
        , { {240, 241}, {242, 243}, {244, 245}, {246, 247}, {248, 249}, {250, 251}, {252, 253}, {254, 255}, {256, 257}, {258, 259}, {260, 261}, {262, 263}, {264, 265}, {266, 267}, {268, 269}, {270, 271}, {272, 273}, {274, 275}, {276, 277}, {278, 279}, {280, 281}, {282, 283}, {284, 285}, {286, 287} }
        , { {288, 289}, {290, 291}, {292, 293}, {294, 295}, {296, 297}, {298, 299}, {300, 301}, {302, 303}, {304, 305}, {306, 307}, {308, 309}, {310, 311}, {312, 313}, {314, 315}, {316, 317}, {318, 319}, {320, 321}, {322, 323}, {324, 325}, {326, 327}, {328, 329}, {330, 331}, {332, 333}, {334, 335} }
        , { {336, 337}, {338, 339}, {340, 341}, {342, 343}, {344, 345}, {346, 347}, {348, 349}, {350, 351}, {352, 353}, {354, 355}, {356, 357}, {358, 359}, {360, 361}, {362, 363}, {364, 365}, {366, 367}, {368, 369}, {370, 371}, {372, 373}, {374, 375}, {376, 377}, {378, 379}, {380, 381}, {382, 383} }
        , { {384, 385}, {386, 387}, {388, 389}, {390, 391}, {392, 393}, {394, 395}, {396, 397}, {398, 399}, {400, 401}, {402, 403}, {404, 405}, {406, 407}, {408, 409}, {410, 411}, {412, 413}, {414, 415}, {416, 417}, {418, 419}, {420, 421}, {422, 423}, {424, 425}, {426, 427}, {428, 429}, {430, 431} }
        , { {432, 433}, {434, 435}, {436, 437}, {438, 439}, {440, 441}, {442, 443}, {444, 445}, {446, 447}, {448, 449}, {450, 451}, {452, 453}, {454, 455}, {456, 457}, {458, 459}, {460, 461}, {462, 463}, {464, 465}, {466, 467}, {468, 469}, {470, 471}, {472, 473}, {474, 475}, {476, 477}, {478, 479} }
        , { {480, 481}, {482, 483}, {484, 485}, {486, 487}, {488, 489}, {490, 491}, {492, 493}, {494, 495}, {496, 497}, {498, 499}, {500, 501}, {502, 503}, {504, 505}, {506, 507}, {508, 509}, {510, 511}, {512, 513}, {514, 515}, {516, 517}, {518, 519}, {520, 521}, {522, 523}, {524, 525}, {526, 527} }
        , { {528, 529}, {530, 531}, {532, 533}, {534, 535}, {536, 537}, {538, 539}, {540, 541}, {542, 543}, {544, 545}, {546, 547}, {548, 549}, {550, 551}, {552, 553}, {554, 555}, {556, 557}, {558, 559}, {560, 561}, {562, 563}, {564, 565}, {566, 567}, {568, 569}, {570, 571}, {572, 573}, {574, 575} }
        , { {576, 577}, {578, 579}, {580, 581}, {582, 583}, {584, 585}, {586, 587}, {588, 589}, {590, 591}, {592, 593}, {594, 595}, {596, 597}, {598, 599}, {600, 601}, {602, 603}, {604, 605}, {606, 607}, {608, 609}, {610, 611}, {612, 613}, {614, 615}, {616, 617}, {618, 619}, {620, 621}, {622, 623} }
        , { {624, 625}, {626, 627}, {628, 629}, {630, 631}, {632, 633}, {634, 635}, {636, 637}, {638, 639}, {640, 641}, {642, 643}, {644, 645}, {646, 647}, {648, 649}, {650, 651}, {652, 653}, {654, 655}, {656, 657}, {658, 659}, {660, 661}, {662, 663}, {664, 665}, {666, 667}, {668, 669}, {670, 671} }
        , { {672, 673}, {674, 675}, {676, 677}, {678, 679}, {680, 681}, {682, 683}, {684, 685}, {686, 687}, {688, 689}, {690, 691}, {692, 693}, {694, 695}, {696, 697}, {698, 699}, {700, 701}, {702, 703}, {704, 705}, {706, 707}, {708, 709}, {710, 711}, {712, 713}, {714, 715}, {716, 717}, {718, 719} }
        , { {720, 721}, {722, 723}, {724, 725}, {726, 727}, {728, 729}, {730, 731}, {732, 733}, {734, 735}, {736, 737}, {738, 739}, {740, 741}, {742, 743}, {744, 745}, {746, 747}, {748, 749}, {750, 751}, {752, 753}, {754, 755}, {756, 757}, {758, 759}, {760, 761}, {762, 763}, {764, 765}, {766, 767} }
        , { {768, 769}, {770, 771}, {772, 773}, {774, 775}, {776, 777}, {778, 779}, {780, 781}, {782, 783}, {784, 785}, {786, 787}, {788, 789}, {790, 791}, {792, 793}, {794, 795}, {796, 797}, {798, 799}, {800, 801}, {802, 803}, {804, 805}, {806, 807}, {808, 809}, {810, 811}, {812, 813}, {814, 815} }
        , { {816, 817}, {818, 819}, {820, 821}, {822, 823}, {824, 825}, {826, 827}, {828, 829}, {830, 831}, {832, 833}, {834, 835}, {836, 837}, {838, 839}, {840, 841}, {842, 843}, {844, 845}, {846, 847}, {848, 849}, {850, 851}, {852, 853}, {854, 855}, {856, 857}, {858, 859}, {860, 861}, {862, 863} }
        , { {864, 865}, {866, 867}, {868, 869}, {870, 871}, {872, 873}, {874, 875}, {876, 877}, {878, 879}, {880, 881}, {882, 883}, {884, 885}, {886, 887}, {888, 889}, {890, 891}, {892, 893}, {894, 895}, {896, 897}, {898, 899}, {900, 901}, {902, 903}, {904, 905}, {906, 907}, {908, 909}, {910, 911} }
        , { {912, 913}, {914, 915}, {916, 917}, {918, 919}, {920, 921}, {922, 923}, {924, 925}, {926, 927}, {928, 929}, {930, 931}, {932, 933}, {934, 935}, {936, 937}, {938, 939}, {940, 941}, {942, 943}, {944, 945}, {946, 947}, {948, 949}, {950, 951}, {952, 953}, {954, 955}, {956, 957}, {958, 959} }
        , { {960, 961}, {962, 963}, {964, 965}, {966, 967}, {968, 969}, {970, 971}, {972, 973}, {974, 975}, {976, 977}, {978, 979}, {980, 981}, {982, 983}, {984, 985}, {986, 987}, {988, 989}, {990, 991}, {992, 993}, {994, 995}, {996, 997}, {998, 999}, {1000, 1001}, {1002, 1003}, {1004, 1005}, {1006, 1007} }
        , { {1008, 1009}, {1010, 1011}, {1012, 1013}, {1014, 1015}, {1016, 1017}, {1018, 1019}, {1020, 1021}, {1022, 1023}, {1024, 1025}, {1026, 1027}, {1028, 1029}, {1030, 1031}, {1032, 1033}, {1034, 1035}, {1036, 1037}, {1038, 1039}, {1040, 1041}, {1042, 1043}, {1044, 1045}, {1046, 1047}, {1048, 1049}, {1050, 1051}, {1052, 1053}, {1054, 1055} }
        , { {1056, 1057}, {1058, 1059}, {1060, 1061}, {1062, 1063}, {1064, 1065}, {1066, 1067}, {1068, 1069}, {1070, 1071}, {1072, 1073}, {1074, 1075}, {1076, 1077}, {1078, 1079}, {1080, 1081}, {1082, 1083}, {1084, 1085}, {1086, 1087}, {1088, 1089}, {1090, 1091}, {1092, 1093}, {1094, 1095}, {1096, 1097}, {1098, 1099}, {1100, 1101}, {1102, 1103} }
        , { {1104, 1105}, {1106, 1107}, {1108, 1109}, {1110, 1111}, {1112, 1113}, {1114, 1115}, {1116, 1117}, {1118, 1119}, {1120, 1121}, {1122, 1123}, {1124, 1125}, {1126, 1127}, {1128, 1129}, {1130, 1131}, {1132, 1133}, {1134, 1135}, {1136, 1137}, {1138, 1139}, {1140, 1141}, {1142, 1143}, {1144, 1145}, {1146, 1147}, {1148, 1149}, {1150, 1151} }
    };


    static const int two_qbit_config_after_CZ[1152][3] = 
    {
        {0, 0, 0}
        , {2, 2, 0}
        , {0, 1, 0}
        , {0, 8, 1}
        , {0, 2, 0}
        , {0, 5, 1}
        , {0, 0, 0}
        , {2, 1, 0}
        , {0, 4, 0}
        , {1, 2, 0}
        , {0, 5, 0}
        , {0, 2, 1}
        , {0, 2, 0}
        , {1, 1, 0}
        , {0, 7, 0}
        , {5, 2, 0}
        , {0, 8, 0}
        , {0, 1, 1}
        , {0, 7, 0}
        , {5, 1, 0}
        , {0, 1, 0}
        , {8, 2, 0}
        , {0, 5, 0}
        , {8, 1, 0}
        , {0, 2, 0}
        , {8, 8, 0}
        , {0, 0, 0}
        , {2, 5, 0}
        , {0, 2, 0}
        , {0, 14, 1}
        , {0, 0, 0}
        , {2, 8, 0}
        , {0, 1, 0}
        , {0, 16, 1}
        , {0, 1, 0}
        , {1, 5, 0}
        , {0, 4, 0}
        , {0, 18, 1}
        , {0, 5, 0}
        , {1, 8, 0}
        , {0, 7, 0}
        , {5, 5, 0}
        , {0, 5, 0}
        , {0, 21, 1}
        , {0, 7, 0}
        , {5, 8, 0}
        , {0, 4, 0}
        , {8, 5, 0}
        , {1, 0, 0}
        , {1, 13, 1}
        , {1, 1, 1}
        , {1, 1, 0}
        , {1, 2, 1}
        , {1, 2, 0}
        , {1, 0, 0}
        , {1, 15, 1}
        , {1, 8, 1}
        , {2, 8, 0}
        , {1, 5, 1}
        , {1, 5, 0}
        , {1, 2, 1}
        , {2, 2, 0}
        , {8, 7, 0}
        , {1, 7, 1}
        , {1, 8, 1}
        , {1, 8, 0}
        , {8, 7, 0}
        , {1, 9, 1}
        , {1, 1, 1}
        , {5, 1, 0}
        , {1, 5, 1}
        , {5, 5, 0}
        , {1, 2, 1}
        , {5, 2, 0}
        , {1, 0, 0}
        , {1, 0, 1}
        , {1, 2, 1}
        , {8, 2, 0}
        , {1, 0, 0}
        , {1, 3, 1}
        , {1, 1, 1}
        , {8, 1, 0}
        , {1, 1, 1}
        , {2, 1, 0}
        , {1, 8, 1}
        , {8, 8, 0}
        , {1, 5, 1}
        , {2, 5, 0}
        , {8, 7, 0}
        , {1, 20, 1}
        , {1, 5, 1}
        , {8, 5, 0}
        , {8, 7, 0}
        , {1, 22, 1}
        , {1, 8, 1}
        , {5, 8, 0}
        , {2, 0, 0}
        , {1, 3, 1}
        , {2, 1, 1}
        , {2, 1, 0}
        , {2, 2, 1}
        , {2, 2, 0}
        , {2, 0, 0}
        , {1, 13, 1}
        , {2, 8, 1}
        , {8, 8, 0}
        , {2, 5, 1}
        , {2, 5, 0}
        , {2, 2, 1}
        , {8, 2, 0}
        , {5, 7, 0}
        , {1, 9, 1}
        , {2, 8, 1}
        , {2, 8, 0}
        , {5, 7, 0}
        , {1, 20, 1}
        , {2, 1, 1}
        , {1, 1, 0}
        , {2, 5, 1}
        , {1, 5, 0}
        , {2, 2, 1}
        , {1, 2, 0}
        , {2, 0, 0}
        , {1, 15, 1}
        , {2, 2, 1}
        , {5, 2, 0}
        , {2, 0, 0}
        , {1, 0, 1}
        , {2, 1, 1}
        , {5, 1, 0}
        , {2, 1, 1}
        , {8, 1, 0}
        , {2, 8, 1}
        , {5, 8, 0}
        , {2, 5, 1}
        , {8, 5, 0}
        , {5, 7, 0}
        , {1, 22, 1}
        , {2, 5, 1}
        , {5, 5, 0}
        , {5, 7, 0}
        , {1, 7, 1}
        , {2, 8, 1}
        , {1, 8, 0}
        , {0, 0, 0}
        , {1, 2, 0}
        , {0, 1, 0}
        , {0, 2, 1}
        , {0, 2, 0}
        , {0, 8, 1}
        , {0, 0, 0}
        , {1, 1, 0}
        , {0, 4, 0}
        , {5, 2, 0}
        , {0, 5, 0}
        , {0, 1, 1}
        , {0, 2, 0}
        , {5, 1, 0}
        , {0, 7, 0}
        , {8, 2, 0}
        , {0, 8, 0}
        , {0, 5, 1}
        , {0, 7, 0}
        , {8, 1, 0}
        , {0, 1, 0}
        , {2, 2, 0}
        , {0, 5, 0}
        , {2, 1, 0}
        , {0, 2, 0}
        , {2, 8, 0}
        , {0, 0, 0}
        , {1, 5, 0}
        , {0, 2, 0}
        , {0, 18, 1}
        , {0, 0, 0}
        , {1, 8, 0}
        , {0, 1, 0}
        , {0, 14, 1}
        , {0, 1, 0}
        , {5, 5, 0}
        , {0, 4, 0}
        , {0, 21, 1}
        , {0, 5, 0}
        , {5, 8, 0}
        , {0, 7, 0}
        , {8, 5, 0}
        , {0, 5, 0}
        , {0, 16, 1}
        , {0, 7, 0}
        , {8, 8, 0}
        , {0, 4, 0}
        , {2, 5, 0}
        , {4, 0, 0}
        , {2, 1, 0}
        , {8, 1, 1}
        , {8, 2, 0}
        , {8, 2, 1}
        , {8, 8, 0}
        , {4, 0, 0}
        , {2, 5, 0}
        , {8, 8, 1}
        , {0, 1, 1}
        , {8, 5, 1}
        , {8, 1, 0}
        , {8, 2, 1}
        , {0, 5, 1}
        , {1, 7, 0}
        , {5, 8, 0}
        , {8, 8, 1}
        , {8, 5, 0}
        , {1, 7, 0}
        , {5, 2, 0}
        , {8, 1, 1}
        , {0, 16, 1}
        , {8, 5, 1}
        , {0, 21, 1}
        , {8, 2, 1}
        , {0, 14, 1}
        , {4, 0, 0}
        , {2, 8, 0}
        , {8, 2, 1}
        , {1, 1, 0}
        , {4, 0, 0}
        , {2, 2, 0}
        , {8, 1, 1}
        , {1, 5, 0}
        , {8, 1, 1}
        , {0, 8, 1}
        , {8, 8, 1}
        , {1, 2, 0}
        , {8, 5, 1}
        , {0, 2, 1}
        , {1, 7, 0}
        , {5, 1, 0}
        , {8, 5, 1}
        , {1, 8, 0}
        , {1, 7, 0}
        , {5, 5, 0}
        , {8, 8, 1}
        , {0, 18, 1}
        , {5, 0, 0}
        , {1, 15, 1}
        , {5, 1, 1}
        , {5, 1, 0}
        , {5, 2, 1}
        , {5, 2, 0}
        , {5, 0, 0}
        , {1, 0, 1}
        , {5, 8, 1}
        , {1, 8, 0}
        , {5, 5, 1}
        , {5, 5, 0}
        , {5, 2, 1}
        , {1, 2, 0}
        , {2, 7, 0}
        , {1, 22, 1}
        , {5, 8, 1}
        , {5, 8, 0}
        , {2, 7, 0}
        , {1, 7, 1}
        , {5, 1, 1}
        , {8, 1, 0}
        , {5, 5, 1}
        , {8, 5, 0}
        , {5, 2, 1}
        , {8, 2, 0}
        , {5, 0, 0}
        , {1, 3, 1}
        , {5, 2, 1}
        , {2, 2, 0}
        , {5, 0, 0}
        , {1, 13, 1}
        , {5, 1, 1}
        , {2, 1, 0}
        , {5, 1, 1}
        , {1, 1, 0}
        , {5, 8, 1}
        , {2, 8, 0}
        , {5, 5, 1}
        , {1, 5, 0}
        , {2, 7, 0}
        , {1, 9, 1}
        , {5, 5, 1}
        , {2, 5, 0}
        , {2, 7, 0}
        , {1, 20, 1}
        , {5, 8, 1}
        , {8, 8, 0}
        , {2, 0, 0}
        , {1, 1, 0}
        , {2, 1, 1}
        , {2, 2, 0}
        , {2, 2, 1}
        , {2, 8, 0}
        , {2, 0, 0}
        , {1, 5, 0}
        , {2, 8, 1}
        , {0, 5, 1}
        , {2, 5, 1}
        , {2, 1, 0}
        , {2, 2, 1}
        , {0, 8, 1}
        , {5, 7, 0}
        , {8, 8, 0}
        , {2, 8, 1}
        , {2, 5, 0}
        , {5, 7, 0}
        , {8, 2, 0}
        , {2, 1, 1}
        , {0, 14, 1}
        , {2, 5, 1}
        , {0, 16, 1}
        , {2, 2, 1}
        , {0, 18, 1}
        , {2, 0, 0}
        , {1, 8, 0}
        , {2, 2, 1}
        , {5, 1, 0}
        , {2, 0, 0}
        , {1, 2, 0}
        , {2, 1, 1}
        , {5, 5, 0}
        , {2, 1, 1}
        , {0, 2, 1}
        , {2, 8, 1}
        , {5, 2, 0}
        , {2, 5, 1}
        , {0, 1, 1}
        , {5, 7, 0}
        , {8, 1, 0}
        , {2, 5, 1}
        , {5, 8, 0}
        , {5, 7, 0}
        , {8, 5, 0}
        , {2, 8, 1}
        , {0, 21, 1}
        , {7, 0, 0}
        , {2, 5, 0}
        , {7, 8, 0}
        , {7, 1, 1}
        , {7, 5, 0}
        , {7, 2, 1}
        , {7, 0, 0}
        , {2, 8, 0}
        , {7, 1, 0}
        , {8, 5, 0}
        , {7, 2, 0}
        , {7, 5, 1}
        , {7, 5, 0}
        , {8, 8, 0}
        , {7, 7, 0}
        , {5, 5, 0}
        , {7, 1, 0}
        , {7, 8, 1}
        , {7, 7, 0}
        , {5, 8, 0}
        , {7, 4, 0}
        , {1, 5, 0}
        , {7, 2, 0}
        , {1, 8, 0}
        , {7, 5, 0}
        , {1, 1, 0}
        , {7, 0, 0}
        , {2, 2, 0}
        , {7, 5, 0}
        , {0, 5, 1}
        , {7, 0, 0}
        , {2, 1, 0}
        , {7, 4, 0}
        , {0, 8, 1}
        , {7, 4, 0}
        , {8, 2, 0}
        , {7, 1, 0}
        , {0, 1, 1}
        , {7, 2, 0}
        , {8, 1, 0}
        , {7, 7, 0}
        , {5, 2, 0}
        , {7, 2, 0}
        , {0, 2, 1}
        , {7, 7, 0}
        , {5, 1, 0}
        , {7, 1, 0}
        , {1, 2, 0}
        , {8, 0, 0}
        , {1, 0, 1}
        , {8, 1, 1}
        , {8, 1, 0}
        , {8, 2, 1}
        , {8, 2, 0}
        , {8, 0, 0}
        , {1, 3, 1}
        , {8, 8, 1}
        , {5, 8, 0}
        , {8, 5, 1}
        , {8, 5, 0}
        , {8, 2, 1}
        , {5, 2, 0}
        , {1, 7, 0}
        , {1, 20, 1}
        , {8, 8, 1}
        , {8, 8, 0}
        , {1, 7, 0}
        , {1, 22, 1}
        , {8, 1, 1}
        , {2, 1, 0}
        , {8, 5, 1}
        , {2, 5, 0}
        , {8, 2, 1}
        , {2, 2, 0}
        , {8, 0, 0}
        , {1, 13, 1}
        , {8, 2, 1}
        , {1, 2, 0}
        , {8, 0, 0}
        , {1, 15, 1}
        , {8, 1, 1}
        , {1, 1, 0}
        , {8, 1, 1}
        , {5, 1, 0}
        , {8, 8, 1}
        , {1, 8, 0}
        , {8, 5, 1}
        , {5, 5, 0}
        , {1, 7, 0}
        , {1, 7, 1}
        , {8, 5, 1}
        , {1, 5, 0}
        , {1, 7, 0}
        , {1, 9, 1}
        , {8, 8, 1}
        , {2, 8, 0}
        , {7, 0, 0}
        , {1, 5, 0}
        , {7, 8, 0}
        , {7, 2, 1}
        , {7, 5, 0}
        , {7, 8, 1}
        , {7, 0, 0}
        , {1, 8, 0}
        , {7, 1, 0}
        , {2, 5, 0}
        , {7, 2, 0}
        , {7, 1, 1}
        , {7, 5, 0}
        , {2, 8, 0}
        , {7, 7, 0}
        , {8, 5, 0}
        , {7, 1, 0}
        , {7, 5, 1}
        , {7, 7, 0}
        , {8, 8, 0}
        , {7, 4, 0}
        , {5, 5, 0}
        , {7, 2, 0}
        , {5, 8, 0}
        , {7, 5, 0}
        , {5, 1, 0}
        , {7, 0, 0}
        , {1, 2, 0}
        , {7, 5, 0}
        , {0, 8, 1}
        , {7, 0, 0}
        , {1, 1, 0}
        , {7, 4, 0}
        , {0, 2, 1}
        , {7, 4, 0}
        , {2, 2, 0}
        , {7, 1, 0}
        , {0, 5, 1}
        , {7, 2, 0}
        , {2, 1, 0}
        , {7, 7, 0}
        , {8, 2, 0}
        , {7, 2, 0}
        , {0, 1, 1}
        , {7, 7, 0}
        , {8, 1, 0}
        , {7, 1, 0}
        , {5, 2, 0}
        , {1, 0, 0}
        , {2, 8, 0}
        , {1, 1, 1}
        , {1, 5, 0}
        , {1, 2, 1}
        , {1, 1, 0}
        , {1, 0, 0}
        , {2, 2, 0}
        , {1, 8, 1}
        , {0, 18, 1}
        , {1, 5, 1}
        , {1, 8, 0}
        , {1, 2, 1}
        , {0, 14, 1}
        , {4, 7, 0}
        , {5, 1, 0}
        , {1, 8, 1}
        , {1, 2, 0}
        , {4, 7, 0}
        , {5, 5, 0}
        , {1, 1, 1}
        , {0, 8, 1}
        , {1, 5, 1}
        , {0, 2, 1}
        , {1, 2, 1}
        , {0, 5, 1}
        , {1, 0, 0}
        , {2, 1, 0}
        , {1, 2, 1}
        , {8, 8, 0}
        , {1, 0, 0}
        , {2, 5, 0}
        , {1, 1, 1}
        , {8, 2, 0}
        , {1, 1, 1}
        , {0, 16, 1}
        , {1, 8, 1}
        , {8, 5, 0}
        , {1, 5, 1}
        , {0, 21, 1}
        , {4, 7, 0}
        , {5, 8, 0}
        , {1, 5, 1}
        , {8, 1, 0}
        , {4, 7, 0}
        , {5, 2, 0}
        , {1, 8, 1}
        , {0, 1, 1}
        , {5, 0, 0}
        , {1, 8, 0}
        , {5, 1, 1}
        , {5, 5, 0}
        , {5, 2, 1}
        , {5, 1, 0}
        , {5, 0, 0}
        , {1, 2, 0}
        , {5, 8, 1}
        , {0, 21, 1}
        , {5, 5, 1}
        , {5, 8, 0}
        , {5, 2, 1}
        , {0, 18, 1}
        , {2, 7, 0}
        , {8, 1, 0}
        , {5, 8, 1}
        , {5, 2, 0}
        , {2, 7, 0}
        , {8, 5, 0}
        , {5, 1, 1}
        , {0, 2, 1}
        , {5, 5, 1}
        , {0, 1, 1}
        , {5, 2, 1}
        , {0, 8, 1}
        , {5, 0, 0}
        , {1, 1, 0}
        , {5, 2, 1}
        , {2, 8, 0}
        , {5, 0, 0}
        , {1, 5, 0}
        , {5, 1, 1}
        , {2, 2, 0}
        , {5, 1, 1}
        , {0, 14, 1}
        , {5, 8, 1}
        , {2, 5, 0}
        , {5, 5, 1}
        , {0, 16, 1}
        , {2, 7, 0}
        , {8, 8, 0}
        , {5, 5, 1}
        , {2, 1, 0}
        , {2, 7, 0}
        , {8, 2, 0}
        , {5, 8, 1}
        , {0, 5, 1}
        , {2, 0, 0}
        , {8, 8, 0}
        , {2, 1, 1}
        , {2, 5, 0}
        , {2, 2, 1}
        , {2, 1, 0}
        , {2, 0, 0}
        , {8, 2, 0}
        , {2, 8, 1}
        , {0, 14, 1}
        , {2, 5, 1}
        , {2, 8, 0}
        , {2, 2, 1}
        , {0, 16, 1}
        , {5, 7, 0}
        , {1, 1, 0}
        , {2, 8, 1}
        , {2, 2, 0}
        , {5, 7, 0}
        , {1, 5, 0}
        , {2, 1, 1}
        , {0, 5, 1}
        , {2, 5, 1}
        , {0, 8, 1}
        , {2, 2, 1}
        , {0, 1, 1}
        , {2, 0, 0}
        , {8, 1, 0}
        , {2, 2, 1}
        , {5, 8, 0}
        , {2, 0, 0}
        , {8, 5, 0}
        , {2, 1, 1}
        , {5, 2, 0}
        , {2, 1, 1}
        , {0, 21, 1}
        , {2, 8, 1}
        , {5, 5, 0}
        , {2, 5, 1}
        , {0, 18, 1}
        , {5, 7, 0}
        , {1, 8, 0}
        , {2, 5, 1}
        , {5, 1, 0}
        , {5, 7, 0}
        , {1, 2, 0}
        , {2, 8, 1}
        , {0, 2, 1}
        , {0, 0, 0}
        , {5, 2, 0}
        , {0, 1, 0}
        , {0, 1, 1}
        , {0, 2, 0}
        , {0, 2, 1}
        , {0, 0, 0}
        , {5, 1, 0}
        , {0, 4, 0}
        , {8, 2, 0}
        , {0, 5, 0}
        , {0, 5, 1}
        , {0, 2, 0}
        , {8, 1, 0}
        , {0, 7, 0}
        , {2, 2, 0}
        , {0, 8, 0}
        , {0, 8, 1}
        , {0, 7, 0}
        , {2, 1, 0}
        , {0, 1, 0}
        , {1, 2, 0}
        , {0, 5, 0}
        , {1, 1, 0}
        , {0, 2, 0}
        , {1, 8, 0}
        , {0, 0, 0}
        , {5, 5, 0}
        , {0, 2, 0}
        , {0, 21, 1}
        , {0, 0, 0}
        , {5, 8, 0}
        , {0, 1, 0}
        , {0, 18, 1}
        , {0, 1, 0}
        , {8, 5, 0}
        , {0, 4, 0}
        , {0, 16, 1}
        , {0, 5, 0}
        , {8, 8, 0}
        , {0, 7, 0}
        , {2, 5, 0}
        , {0, 5, 0}
        , {0, 14, 1}
        , {0, 7, 0}
        , {2, 8, 0}
        , {0, 4, 0}
        , {1, 5, 0}
        , {2, 0, 0}
        , {0, 14, 1}
        , {2, 1, 1}
        , {2, 8, 0}
        , {2, 2, 1}
        , {2, 5, 0}
        , {2, 0, 0}
        , {0, 16, 1}
        , {2, 8, 1}
        , {1, 1, 0}
        , {2, 5, 1}
        , {2, 2, 0}
        , {2, 2, 1}
        , {1, 5, 0}
        , {5, 7, 0}
        , {0, 5, 1}
        , {2, 8, 1}
        , {2, 1, 0}
        , {5, 7, 0}
        , {0, 8, 1}
        , {2, 1, 1}
        , {8, 8, 0}
        , {2, 5, 1}
        , {8, 2, 0}
        , {2, 2, 1}
        , {8, 5, 0}
        , {2, 0, 0}
        , {0, 21, 1}
        , {2, 2, 1}
        , {5, 5, 0}
        , {2, 0, 0}
        , {0, 18, 1}
        , {2, 1, 1}
        , {5, 8, 0}
        , {2, 1, 1}
        , {1, 8, 0}
        , {2, 8, 1}
        , {5, 1, 0}
        , {2, 5, 1}
        , {1, 2, 0}
        , {5, 7, 0}
        , {0, 2, 1}
        , {2, 5, 1}
        , {5, 2, 0}
        , {5, 7, 0}
        , {0, 1, 1}
        , {2, 8, 1}
        , {8, 1, 0}
        , {0, 0, 0}
        , {8, 2, 0}
        , {0, 1, 0}
        , {0, 5, 1}
        , {0, 2, 0}
        , {0, 1, 1}
        , {0, 0, 0}
        , {8, 1, 0}
        , {0, 4, 0}
        , {2, 2, 0}
        , {0, 5, 0}
        , {0, 8, 1}
        , {0, 2, 0}
        , {2, 1, 0}
        , {0, 7, 0}
        , {1, 2, 0}
        , {0, 8, 0}
        , {0, 2, 1}
        , {0, 7, 0}
        , {1, 1, 0}
        , {0, 1, 0}
        , {5, 2, 0}
        , {0, 5, 0}
        , {5, 1, 0}
        , {0, 2, 0}
        , {5, 8, 0}
        , {0, 0, 0}
        , {8, 5, 0}
        , {0, 2, 0}
        , {0, 16, 1}
        , {0, 0, 0}
        , {8, 8, 0}
        , {0, 1, 0}
        , {0, 21, 1}
        , {0, 1, 0}
        , {2, 5, 0}
        , {0, 4, 0}
        , {0, 14, 1}
        , {0, 5, 0}
        , {2, 8, 0}
        , {0, 7, 0}
        , {1, 5, 0}
        , {0, 5, 0}
        , {0, 18, 1}
        , {0, 7, 0}
        , {1, 8, 0}
        , {0, 4, 0}
        , {5, 5, 0}
        , {1, 0, 0}
        , {0, 18, 1}
        , {1, 1, 1}
        , {1, 8, 0}
        , {1, 2, 1}
        , {1, 5, 0}
        , {1, 0, 0}
        , {0, 14, 1}
        , {1, 8, 1}
        , {5, 1, 0}
        , {1, 5, 1}
        , {1, 2, 0}
        , {1, 2, 1}
        , {5, 5, 0}
        , {4, 7, 0}
        , {0, 8, 1}
        , {1, 8, 1}
        , {1, 1, 0}
        , {4, 7, 0}
        , {0, 2, 1}
        , {1, 1, 1}
        , {2, 8, 0}
        , {1, 5, 1}
        , {2, 2, 0}
        , {1, 2, 1}
        , {2, 5, 0}
        , {1, 0, 0}
        , {0, 16, 1}
        , {1, 2, 1}
        , {8, 5, 0}
        , {1, 0, 0}
        , {0, 21, 1}
        , {1, 1, 1}
        , {8, 8, 0}
        , {1, 1, 1}
        , {5, 8, 0}
        , {1, 8, 1}
        , {8, 1, 0}
        , {1, 5, 1}
        , {5, 2, 0}
        , {4, 7, 0}
        , {0, 1, 1}
        , {1, 5, 1}
        , {8, 2, 0}
        , {4, 7, 0}
        , {0, 5, 1}
        , {1, 8, 1}
        , {2, 1, 0}
        , {1, 0, 0}
        , {5, 1, 0}
        , {1, 1, 1}
        , {1, 2, 0}
        , {1, 2, 1}
        , {1, 8, 0}
        , {1, 0, 0}
        , {5, 5, 0}
        , {1, 8, 1}
        , {0, 8, 1}
        , {1, 5, 1}
        , {1, 1, 0}
        , {1, 2, 1}
        , {0, 2, 1}
        , {4, 7, 0}
        , {2, 8, 0}
        , {1, 8, 1}
        , {1, 5, 0}
        , {4, 7, 0}
        , {2, 2, 0}
        , {1, 1, 1}
        , {0, 18, 1}
        , {1, 5, 1}
        , {0, 14, 1}
        , {1, 2, 1}
        , {0, 21, 1}
        , {1, 0, 0}
        , {5, 8, 0}
        , {1, 2, 1}
        , {8, 1, 0}
        , {1, 0, 0}
        , {5, 2, 0}
        , {1, 1, 1}
        , {8, 5, 0}
        , {1, 1, 1}
        , {0, 1, 1}
        , {1, 8, 1}
        , {8, 2, 0}
        , {1, 5, 1}
        , {0, 5, 1}
        , {4, 7, 0}
        , {2, 1, 0}
        , {1, 5, 1}
        , {8, 8, 0}
        , {4, 7, 0}
        , {2, 5, 0}
        , {1, 8, 1}
        , {0, 16, 1}
        , {4, 0, 0}
        , {0, 16, 1}
        , {8, 1, 1}
        , {8, 8, 0}
        , {8, 2, 1}
        , {8, 5, 0}
        , {4, 0, 0}
        , {0, 21, 1}
        , {8, 8, 1}
        , {2, 1, 0}
        , {8, 5, 1}
        , {8, 2, 0}
        , {8, 2, 1}
        , {2, 5, 0}
        , {1, 7, 0}
        , {0, 1, 1}
        , {8, 8, 1}
        , {8, 1, 0}
        , {1, 7, 0}
        , {0, 5, 1}
        , {8, 1, 1}
        , {5, 8, 0}
        , {8, 5, 1}
        , {5, 2, 0}
        , {8, 2, 1}
        , {5, 5, 0}
        , {4, 0, 0}
        , {0, 18, 1}
        , {8, 2, 1}
        , {1, 5, 0}
        , {4, 0, 0}
        , {0, 14, 1}
        , {8, 1, 1}
        , {1, 8, 0}
        , {8, 1, 1}
        , {2, 8, 0}
        , {8, 8, 1}
        , {1, 1, 0}
        , {8, 5, 1}
        , {2, 2, 0}
        , {1, 7, 0}
        , {0, 8, 1}
        , {8, 5, 1}
        , {1, 2, 0}
        , {1, 7, 0}
        , {0, 2, 1}
        , {8, 8, 1}
        , {5, 1, 0}
        , {5, 0, 0}
        , {8, 1, 0}
        , {5, 1, 1}
        , {5, 2, 0}
        , {5, 2, 1}
        , {5, 8, 0}
        , {5, 0, 0}
        , {8, 5, 0}
        , {5, 8, 1}
        , {0, 2, 1}
        , {5, 5, 1}
        , {5, 1, 0}
        , {5, 2, 1}
        , {0, 1, 1}
        , {2, 7, 0}
        , {1, 8, 0}
        , {5, 8, 1}
        , {5, 5, 0}
        , {2, 7, 0}
        , {1, 2, 0}
        , {5, 1, 1}
        , {0, 21, 1}
        , {5, 5, 1}
        , {0, 18, 1}
        , {5, 2, 1}
        , {0, 16, 1}
        , {5, 0, 0}
        , {8, 8, 0}
        , {5, 2, 1}
        , {2, 1, 0}
        , {5, 0, 0}
        , {8, 2, 0}
        , {5, 1, 1}
        , {2, 5, 0}
        , {5, 1, 1}
        , {0, 5, 1}
        , {5, 8, 1}
        , {2, 2, 0}
        , {5, 5, 1}
        , {0, 8, 1}
        , {2, 7, 0}
        , {1, 1, 0}
        , {5, 5, 1}
        , {2, 8, 0}
        , {2, 7, 0}
        , {1, 5, 0}
        , {5, 8, 1}
        , {0, 14, 1}
        , {7, 0, 0}
        , {5, 5, 0}
        , {7, 8, 0}
        , {7, 8, 1}
        , {7, 5, 0}
        , {7, 5, 1}
        , {7, 0, 0}
        , {5, 8, 0}
        , {7, 1, 0}
        , {1, 5, 0}
        , {7, 2, 0}
        , {7, 2, 1}
        , {7, 5, 0}
        , {1, 8, 0}
        , {7, 7, 0}
        , {2, 5, 0}
        , {7, 1, 0}
        , {7, 1, 1}
        , {7, 7, 0}
        , {2, 8, 0}
        , {7, 4, 0}
        , {8, 5, 0}
        , {7, 2, 0}
        , {8, 8, 0}
        , {7, 5, 0}
        , {8, 1, 0}
        , {7, 0, 0}
        , {5, 2, 0}
        , {7, 5, 0}
        , {0, 2, 1}
        , {7, 0, 0}
        , {5, 1, 0}
        , {7, 4, 0}
        , {0, 1, 1}
        , {7, 4, 0}
        , {1, 2, 0}
        , {7, 1, 0}
        , {0, 8, 1}
        , {7, 2, 0}
        , {1, 1, 0}
        , {7, 7, 0}
        , {2, 2, 0}
        , {7, 2, 0}
        , {0, 5, 1}
        , {7, 7, 0}
        , {2, 1, 0}
        , {7, 1, 0}
        , {8, 2, 0}
        , {5, 0, 0}
        , {0, 21, 1}
        , {5, 1, 1}
        , {5, 8, 0}
        , {5, 2, 1}
        , {5, 5, 0}
        , {5, 0, 0}
        , {0, 18, 1}
        , {5, 8, 1}
        , {8, 1, 0}
        , {5, 5, 1}
        , {5, 2, 0}
        , {5, 2, 1}
        , {8, 5, 0}
        , {2, 7, 0}
        , {0, 2, 1}
        , {5, 8, 1}
        , {5, 1, 0}
        , {2, 7, 0}
        , {0, 1, 1}
        , {5, 1, 1}
        , {1, 8, 0}
        , {5, 5, 1}
        , {1, 2, 0}
        , {5, 2, 1}
        , {1, 5, 0}
        , {5, 0, 0}
        , {0, 14, 1}
        , {5, 2, 1}
        , {2, 5, 0}
        , {5, 0, 0}
        , {0, 16, 1}
        , {5, 1, 1}
        , {2, 8, 0}
        , {5, 1, 1}
        , {8, 8, 0}
        , {5, 8, 1}
        , {2, 1, 0}
        , {5, 5, 1}
        , {8, 2, 0}
        , {2, 7, 0}
        , {0, 5, 1}
        , {5, 5, 1}
        , {2, 2, 0}
        , {2, 7, 0}
        , {0, 8, 1}
        , {5, 8, 1}
        , {1, 1, 0}
        , {7, 0, 0}
        , {8, 5, 0}
        , {7, 8, 0}
        , {7, 5, 1}
        , {7, 5, 0}
        , {7, 1, 1}
        , {7, 0, 0}
        , {8, 8, 0}
        , {7, 1, 0}
        , {5, 5, 0}
        , {7, 2, 0}
        , {7, 8, 1}
        , {7, 5, 0}
        , {5, 8, 0}
        , {7, 7, 0}
        , {1, 5, 0}
        , {7, 1, 0}
        , {7, 2, 1}
        , {7, 7, 0}
        , {1, 8, 0}
        , {7, 4, 0}
        , {2, 5, 0}
        , {7, 2, 0}
        , {2, 8, 0}
        , {7, 5, 0}
        , {2, 1, 0}
        , {7, 0, 0}
        , {8, 2, 0}
        , {7, 5, 0}
        , {0, 1, 1}
        , {7, 0, 0}
        , {8, 1, 0}
        , {7, 4, 0}
        , {0, 5, 1}
        , {7, 4, 0}
        , {5, 2, 0}
        , {7, 1, 0}
        , {0, 2, 1}
        , {7, 2, 0}
        , {5, 1, 0}
        , {7, 7, 0}
        , {1, 2, 0}
        , {7, 2, 0}
        , {0, 8, 1}
        , {7, 7, 0}
        , {1, 1, 0}
        , {7, 1, 0}
        , {2, 2, 0}
        , {4, 0, 0}
        , {5, 8, 0}
        , {8, 1, 1}
        , {8, 5, 0}
        , {8, 2, 1}
        , {8, 1, 0}
        , {4, 0, 0}
        , {5, 2, 0}
        , {8, 8, 1}
        , {0, 16, 1}
        , {8, 5, 1}
        , {8, 8, 0}
        , {8, 2, 1}
        , {0, 21, 1}
        , {1, 7, 0}
        , {2, 1, 0}
        , {8, 8, 1}
        , {8, 2, 0}
        , {1, 7, 0}
        , {2, 5, 0}
        , {8, 1, 1}
        , {0, 1, 1}
        , {8, 5, 1}
        , {0, 5, 1}
        , {8, 2, 1}
        , {0, 2, 1}
        , {4, 0, 0}
        , {5, 1, 0}
        , {8, 2, 1}
        , {1, 8, 0}
        , {4, 0, 0}
        , {5, 5, 0}
        , {8, 1, 1}
        , {1, 2, 0}
        , {8, 1, 1}
        , {0, 18, 1}
        , {8, 8, 1}
        , {1, 5, 0}
        , {8, 5, 1}
        , {0, 14, 1}
        , {1, 7, 0}
        , {2, 8, 0}
        , {8, 5, 1}
        , {1, 1, 0}
        , {1, 7, 0}
        , {2, 2, 0}
        , {8, 8, 1}
        , {0, 8, 1}
    };

    static const uint8_t observable_after_vop_commute[6][24] =
    {
        {2, 0, 0, 2, 4, 0, 4, 5, 0, 5, 1, 1, 1, 2, 3, 2, 3, 4, 3, 4, 5, 3, 5, 1}
        , {4, 2, 1, 0, 5, 4, 0, 1, 5, 0, 2, 0, 3, 1, 4, 3, 2, 2, 5, 3, 4, 1, 3, 5}
        , {0, 4, 2, 1, 0, 5, 2, 0, 1, 4, 0, 5, 2, 3, 2, 4, 1, 3, 4, 5, 3, 5, 1, 3}
        , {5, 3, 3, 5, 1, 3, 1, 2, 3, 2, 4, 4, 4, 5, 0, 5, 0, 1, 0, 1, 2, 0, 2, 4}
        , {1, 5, 4, 3, 2, 1, 3, 4, 2, 3, 5, 3, 0, 4, 1, 0, 5, 5, 2, 0, 1, 4, 0, 2}
        , {3, 1, 5, 4, 3, 2, 5, 3, 4, 1, 3, 2, 5, 0, 5, 1, 4, 0, 1, 2, 0, 2, 4, 0}
    };
    static const uint8_t vop_after_projection[6] = 
    { 0, 1, 2, 7, 18, 5 };
    static const uint8_t daggered_vops[24] =
    { 0, 8, 2, 10, 15, 5, 12, 13, 1, 23, 3, 11, 6, 7, 14, 4, 16, 22, 18, 19, 20, 21, 17, 9};
    static int const VOP_H = 0;
    static int const VOP_S = 1;
    static int const VOP_I = 2;
    static int const VOP_Z = 5;
    static int const VOP_X = 14;

    static int const VOP_siZ = 8;
    static int const VOP_smiZ = 1;
    static int const VOP_smiX = 12;
    static int const VOP_siX = 6;
    static int const VOP_siY = 7;
    static int const VOP_smiY = 13;

    static const std::array<std::vector<std::array<int, 2>>, 24> clear_vop_decomposition = 
    {
    std::vector<std::array<int, 2>>({{8, 1}, {12, 3}, {8, 1}}),
     {{8, 3}},
     {},
     {{8, 1}, {12, 3}},
     {{12, 3}, {8, 1}},
     {{8, 2}},
     {{12, 3}},
     {{12, 1}, {8, 1}, {12, 1}, {8, 2}},
     {{8, 1}},
     {{8, 1}, {12, 1}, {8, 2}},
     {{12, 1}, {8, 3}},
     {{12, 1}, {8, 2}},
     {{12, 1}},
     {{12, 1}, {8, 1}, {12, 3}},
     {{12, 2}},
     {{8, 3}, {12, 1}},
     {{8, 1}, {12, 2}},
     {{12, 1}, {8, 1}, {12, 2}},
     {{12, 2}, {8, 1}},
     {{8, 2}, {12, 1}},
     {{12, 1}, {8, 1}, {12, 1}},
     {{12, 2}, {8, 2}},
     {{8, 1}, {12, 1}},
     {{12, 1}, {8, 1}}
    };


    GraphState::GraphState(size_t nqbits):
        m_nqbits(nqbits)
    {
        if(nqbits == 0)
        {
            throw std::invalid_argument("nqbits must be non-zero");
        }
        m_vops = std::vector<int>(nqbits, 2);
        m_ngbhds = std::vector<rbt::RBTree>(nqbits);
    }
    GraphState::~GraphState()
    {
    }
    GraphState::GraphState(GraphState & orig)
    {
        m_nqbits = orig.m_nqbits;
        m_vops = orig.m_vops;
        m_ngbhds = orig.m_ngbhds;
    }
    GraphState::GraphState(GraphState const & orig)
    {
        m_nqbits = orig.m_nqbits;
        m_vops = orig.m_vops;
        m_ngbhds = orig.m_ngbhds;
    }
    int GraphState::nqbits(void)
    {
        return m_nqbits;
    }

    void GraphState::apply_CL(int i, int vop)
    {
        if(vop < 0 || vop > 23)
        {
            throw std::invalid_argument("vop must be in {0, ..., 23}");
        }
        if(i < 0 || i > m_nqbits)
        {
            throw std::invalid_argument("qbit out of range");
        }
        
        m_vops[i] = vop_lookup_table[vop][m_vops[i]];
    }

    void GraphState::export_to_vectors(std::vector<int> & vops, std::vector<std::vector<int>> & ngbs)
    {
        vops.resize(0);
        ngbs.resize(0);
        vops.reserve(m_nqbits);
        ngbs.reserve(m_nqbits);
        
        for(int i = 0; i < m_nqbits; i++)
        {
            vops.push_back(m_vops[i]);
            std::vector<int> ngb;
            m_ngbhds[i].export_inorder_recursive(ngb);
            ngbs.push_back(ngb);
        }
    }

    void GraphState::apply_CZ(int i, int j)
    {
        if(i < 0 || i > m_nqbits)
        {
            throw std::invalid_argument("qbit i out of range");
        }
        if(j < 0 || j > m_nqbits)
        {
            throw std::invalid_argument("qbit j out of range");
        }


        if(vop_commutes_with_CZ(m_vops[i]) && vop_commutes_with_CZ(m_vops[j]))
        {
            // Case 1.
            toggle_edge(i, j);
            return;
        }
        // From now on handle Case 2.
        if(qbits_are_isolated(i, j))
        {
            // Sub-Sub-Case 2.2.1.
            isolated_two_qbit_CZ(i, j);
            return;
        }

        bool cleared_i = false, cleared_j = false;

        if(can_clear_vop(i, j))
        {
            cleared_i = true;
            clear_vop(i, j);
        }
        if(can_clear_vop(j, i))
        {
            cleared_j = true;
            clear_vop(j, i);
        }
        if(!cleared_i && can_clear_vop(i, j))
        {
            // It is possible that we can now clear the VOP on i.
            // This is the case if i is neighbor of j.
            cleared_i = true;
            clear_vop(i, j);
        }

        if(cleared_i && cleared_j)
        {
            // Sub-Case 2.1
            toggle_edge(i, j);
            return;
        }
        // Sub-Sub-Case 2.2.2
        isolated_two_qbit_CZ(i, j);
    }
    inline void GraphState::toggle_edge(int i, int j)
    {
        // Always search in the smaller tree.
        if(m_ngbhds[i].size() <= m_ngbhds[j].size())
        {
            if(m_ngbhds[i].has_value(j))
            {
                m_ngbhds[i].delete_value(j);
                m_ngbhds[j].delete_value(i);
            }
            else
            {
                m_ngbhds[i].insert(j);
                m_ngbhds[j].insert(i);
            }
        }
        else
        {
            if(m_ngbhds[j].has_value(i))
            {
                m_ngbhds[i].delete_value(j);
                m_ngbhds[j].delete_value(i);
            }
            else
            {
                m_ngbhds[i].insert(j);
                m_ngbhds[j].insert(i);
            }
        }
    }
    bool GraphState::qbits_are_isolated(int i, int j)
    {
        if(m_ngbhds[i].size() == 0 && m_ngbhds[j].size() == 0)
        {
            return true;
        }
        if(m_ngbhds[i].size() != 1 || m_ngbhds[j].size() != 1)
        {
            return false;
        }
        if(m_ngbhds[i].has_value(j) && m_ngbhds[j].has_value(i))
        {
            return true;
        }
        return false;
    }

    inline void GraphState::isolated_two_qbit_CZ(int i, int j)
    {
        int entangled_before = m_ngbhds[i].has_value(j);
        int lookup_table_index = two_qbit_config_to_number[m_vops[i]][m_vops[j]][entangled_before];

        m_vops[i] = two_qbit_config_after_CZ[lookup_table_index][0];
        m_vops[j] = two_qbit_config_after_CZ[lookup_table_index][1];
        int entangled_after = two_qbit_config_after_CZ[lookup_table_index][2];

        if(entangled_after && !entangled_before)
        {
            toggle_edge(i, j);
            return;
        }
        if(!entangled_after && entangled_before)
        {
            toggle_edge(i, j);
        }

    }
    inline bool GraphState::can_clear_vop(int i, int j)
    {
        if(m_ngbhds[i].size() > 1)
        {
            // The vertex is connected to at least two other vertices.
            // This guarantees at least one non-operand vertex. We make
            // this check first because it has O(1) time complexity.
            return true;
        }
        // Vertex i has only one neighbor. Check if it is the operand.
        if(m_ngbhds[i].has_value(j))
        {
            // The only neighbor is operand.
            return false;
        }
        // The only neighbor is non-operand.
        return m_ngbhds[i].size() > 0;
    }

    inline void GraphState::clear_vop(int i, int j)
    {
        // No need to clear VOP that commites with CZ.
        if(vop_commutes_with_CZ(m_vops[i]))
        {
            return;
        }

        uint8_t vop_to_clear = m_vops[i];
        for(auto word: clear_vop_decomposition[vop_to_clear])
        {
            int generator_operator = word[0];
            int repeat = word[1];

            if(generator_operator == VOP_smiX)
            {
                La_transformation(i, repeat);
                continue;
            }

            int ngb = m_ngbhds[i].get_element_excluding(j);
            La_transformation(ngb, repeat);
            
        }
    }
    inline void GraphState::La_transformation(int i, int repeat)
    {
        for(int n = 0; n < repeat; n++)
        {
            m_vops[i] = vop_lookup_table[m_vops[i]][VOP_siX];
        }
        for(auto j: m_ngbhds[i])
        {
            for(int n = 0; n < repeat; n++)
            {
                m_vops[j] = vop_lookup_table[m_vops[j]][VOP_smiZ];
            }

            if(repeat % 2) // Toggle the neighbourhood at most once.
            {
                for(auto k: m_ngbhds[i])
                {
                    if(k == j) // Don't re-toggle.
                    {
                        break;
                    }
                    toggle_edge(j, k);

                }
            }
        }
    }

    int GraphState::measurement_probability(int i, int pauli)
    {
        if(i < 0 || i > m_nqbits)
        {
            throw std::invalid_argument("qbit i out of range");
        }
        if(pauli < 0 || pauli > 5)
        {
            throw std::invalid_argument("pauli must be 0, ..., 5");
        }

        uint8_t observable = observable_after_vop_commute[pauli][m_vops[i]];

        if((observable == pauli_X || observable == pauli_mX) && m_ngbhds[i].size() == 0)
        {
            if(observable == pauli_X)
            {
                return 0;
            }
            return -1;
        }

        return 1;
    }

    void GraphState::project_to(int i, int pauli)
    {
        if(measurement_probability(i, pauli) == -1)
        {
            throw std::runtime_error("projection to Pauli would give zero (P_sigma |psi> = 0)");
        }

        do_project_to(i, observable_after_vop_commute[pauli][m_vops[i]]);
    }

    inline void GraphState::do_project_to(int i, int pauli)
    {
        if((pauli == pauli_X || pauli == pauli_mX)
            && m_ngbhds[i].size() == 0)
        {
            return; // State is invariant.
        }

        m_vops[i] = vop_lookup_table[m_vops[i]][vop_after_projection[pauli]];
        switch(pauli)
        {
            case pauli_X:
            {
                int ngb_b = *(m_ngbhds[i].begin()); // This element exists because m_ngbhds[i].size() != 0
                m_vops[ngb_b] = vop_lookup_table[m_vops[ngb_b]][VOP_smiY];


                for(auto c: m_ngbhds[i])
                {
                    if(c != ngb_b && !m_ngbhds[ngb_b].has_value(c))
                    {
                        m_vops[c] = vop_lookup_table[m_vops[c]][VOP_Z];
                    }
                }

                rbt::RBTree ngbhd_i = m_ngbhds[i];
                rbt::RBTree ngbhd_b = m_ngbhds[ngb_b];
                for(auto c: ngbhd_b)
                {
                    for(auto d: ngbhd_i)
                    {
                        if(c != d)
                        {
                            toggle_edge(c, d);
                        }
                    }
                }

                for(auto c: ngbhd_b)
                {
                    for(auto d: ngbhd_b)
                    {
                        if(d != c && m_ngbhds[i].has_value(d))
                        {
                            toggle_edge(c, d);
                        }
                    }
                }

                for(auto d: ngbhd_i)
                {
                    if(d != ngb_b)
                    {
                        toggle_edge(d, ngb_b);
                    }
                }
                break;
            }
            case pauli_mX:
            {
                int ngb_b = *(m_ngbhds[i].begin()); // This element exists because m_ngbhds[i].size() != 0
                m_vops[ngb_b] = vop_lookup_table[m_vops[ngb_b]][VOP_siY];

                for(auto c: m_ngbhds[ngb_b])
                {
                    if(c != i && !m_ngbhds[i].has_value(c))
                    {
                        m_vops[c] = vop_lookup_table[m_vops[c]][VOP_Z];
                    }
                }

                rbt::RBTree ngbhd_i = m_ngbhds[i];
                rbt::RBTree ngbhd_b = m_ngbhds[ngb_b];
                for(auto c: ngbhd_b)
                {
                    for(auto d: ngbhd_i)
                    {
                        if(c != d)
                        {
                            toggle_edge(c, d);
                        }
                    }
                }

                for(auto c: ngbhd_b)
                {
                    for(auto d: ngbhd_b)
                    {
                        if(d != c && m_ngbhds[i].has_value(d))
                        {
                            toggle_edge(c, d);
                        }
                    }
                }

                for(auto d: ngbhd_i)
                {
                    if(d != ngb_b)
                    {
                        toggle_edge(d, ngb_b);
                    }
                }
                break;
            }

            case pauli_Y:
            case pauli_mY:
            {
                uint8_t rmultiply;
                if(pauli == pauli_Y)
                {
                    rmultiply = VOP_smiZ;
                }
                else
                {
                    rmultiply = VOP_siZ;
                }

                for(auto j: m_ngbhds[i])
                {
                    m_vops[j] = vop_lookup_table[m_vops[j]][rmultiply];
                }

                toggle_neighbourhood(i);
                isolate_qbit(i);
                break;
            }
            case pauli_Z:
            {
                isolate_qbit(i);
                break;
            }
            case pauli_mZ:
            {
                for(auto n: m_ngbhds[i])
                {
                    m_vops[n] = vop_lookup_table[m_vops[n]][VOP_Z];
                }
                isolate_qbit(i);
                break;
            }
        }
    }

    inline void GraphState::toggle_neighbourhood(int i)
    {
        for(auto n: m_ngbhds[i])
        {
            for(auto m: m_ngbhds[i])
            {
                if(n == m)
                {
                    break;
                }
                toggle_edge(m, n);
            }
        }
    }
    inline void GraphState::isolate_qbit(int i)
    {
        for(auto n: m_ngbhds[i])
        {
            m_ngbhds[n].delete_value(i);
        }
        m_ngbhds[i] = rbt::RBTree();
    }

    int GraphState::operator*(GraphState & other)
    {
        if(other.m_nqbits != m_nqbits)
        {
            throw std::invalid_argument("compute overlap: states must have same number of qbits");
        }
        GraphState copy(*this);

        for(size_t i = 0; i < m_nqbits; i++)
        {
            copy.apply_CL(i, daggered_vops[other.m_vops[i]]);
        }

        for(size_t i = 0; i < m_nqbits; i++)
        {
            for(auto j: other.m_ngbhds[i])
            {
                if(j > i)
                {
                    copy.apply_CZ(i, j);
                }
            }
        }

        // Recall that other has the form 
        //
        // U_local U_nonlocal |+>
        //
        // We just multiplied the two unitaries onto the state copy.  This leaves
        //
        // <other|copy> = <+|copy'>. 
        //
        // The state |+> is stabilized by the Pauli
        // X operator. Therefore, it is invariant under P_X (projection onto Pauli
        // +X). We now insert projection operators in the product:
        //
        // <+|P_X|copy'>
        //
        // We know that the product must be invariant and observe the action of the
        // projection on |copy'>. This gives the overlap.

        int amplitude = 0;
        for(size_t i = 0; i < m_nqbits; i++)
        {
            // measurement_probability gives the probability to get a +1
            // eigenstate of the given Pauli operator. This is either 0 (result = -1),
            // 1 (result = 0), or 1/2 (result = 1). 
            int result = copy.measurement_probability(i, pauli_X);
            if(result < 0)
            {
                return -1; // We have an element with zero overlap.
            }
            amplitude += result;
            // Apply the projection.
            copy.project_to(i, pauli_X);
        }

        return amplitude;
    }
}
